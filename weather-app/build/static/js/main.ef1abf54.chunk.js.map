{"version":3,"sources":["WeatherImage.js","ForcastWeather.js","CurrentWeather.js","App.js","serviceWorker.js","index.js"],"names":["WeatherImage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","icon","id","nextprops","setState","react_default","a","createElement","src","alt","Component","ForcastWeather","dateortime","ent","ind","key","list","dt","main","weather","dt_txt","fetch","lat","lon","then","res","json","console","log","_this2","_this3","map","split","ent1","WeatherImage_WeatherImage","temp","temp_max","temp_min","CurrentWeather","name","App","setpos","position","coords","latitude","longitude","error","err","alert","forecastOnClick","event","forecast","navigator","geolocation","getCurrentPosition","CurrentWeather_CurrentWeather","ForcastWeather_ForcastWeather","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef1abf54.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class WeatherImage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            icon: props.id\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextprops) {\r\n        this.setState({\r\n            icon: nextprops.id\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img src={\"https://openweathermap.org/img/w/\" + this.state.icon + \".png\"} alt=\"not loaded\" />\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport WeathIm from './WeatherImage.js';\r\nimport './ForecastWeather.css';\r\n\r\nexport default class ForcastWeather extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            list: [{ dt: \"\", main: {}, weather: [{}], dt_txt: \" \" }]\r\n        }\r\n        fetch(\"https://api.openweathermap.org/data/2.5/forecast?lat=\" + this.props.lat + \"&lon=\" + this.props.lon + \"&APPID=9592eb101cb5b0e09de21ab8f991d0c3&units=metric\")\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                this.setState({\r\n                    list: res.list\r\n                }, () => { console.log(this.state) })\r\n            });\r\n    }\r\n    componentWillReceiveProps(nextprops) {\r\n        fetch(\"https://api.openweathermap.org/data/2.5/forecast?lat=\" + nextprops.lat + \"&lon=\" + nextprops.lon + \"&APPID=9592eb101cb5b0e09de21ab8f991d0c3&units=metric\")\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                this.setState({\r\n                    list: res.list\r\n                }, () => { console.log(this.state) })\r\n            });\r\n\r\n    }\r\n    dateortime = (ent, ind) => {\r\n        if (ind % 2 === 0) {\r\n            return <td key={\"date\" + ind}>{ent} </td>\r\n        } else {\r\n            return <td key={\"time\" + ind}>{ent} </td>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"forcast-maindiv\">\r\n                <h2>Forecast</h2>\r\n                <table>\r\n                    <tr>\r\n                        <th>Date:</th>\r\n                        <th>Time:</th>\r\n                        <th>Weather image:</th>\r\n                        <th>Weather:</th>\r\n                        <th>Temp:</th>\r\n                        <th>Max Temp:</th>\r\n                        <th>Min Temp:</th>\r\n                    </tr>\r\n\r\n                    {this.state.list.map((ent) =>\r\n                        <tr>\r\n                            {ent.dt_txt.split(\" \").map((ent1, ind) => this.dateortime(ent1, ind))}\r\n                            <td><WeathIm id={ent.weather[0].icon} /></td>\r\n                            <td>{ent.weather[0].main}</td>\r\n                            <td> {ent.main.temp} &#8451;</td>\r\n                            <td> max: {ent.main.temp_max} &#8451;</td>\r\n                            <td>min: {ent.main.temp_min} &#8451;</td>\r\n\r\n                        </tr>\r\n                    )}\r\n\r\n\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport WeathIm from './WeatherImage.js';\r\nimport'./CurrentWeather.css'\r\n\r\nexport default class CurrentWeather extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            weather: [{}],\r\n            main: {}\r\n        }\r\n        fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + this.props.lat + \"&lon=\" + this.props.lon + \"&APPID=9592eb101cb5b0e09de21ab8f991d0c3&units=metric\")\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                this.setState({\r\n                    name: res.name,\r\n                    weather: res.weather,\r\n                    main: res.main\r\n                }, () => {\r\n                    console.log(this.state)\r\n                });\r\n            })\r\n    }\r\n    componentWillReceiveProps(nextprops) {\r\n        fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + nextprops.lat + \"&lon=\" + nextprops.lon + \"&APPID=9592eb101cb5b0e09de21ab8f991d0c3&units=metric\")\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                this.setState({\r\n                    name: res.name,\r\n                    weather: res.weather,\r\n                    main: res.main\r\n                }, () => {\r\n                    console.log(this.state)\r\n                });\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"current-div\">\r\n                <h2> {this.state.name}</h2>\r\n                <p><WeathIm id={this.state.weather[0].icon} />{this.state.weather[0].main}</p>\r\n                \r\n                <p>&#8593; {this.state.main.temp_max} &#8451; &#8595; {this.state.main.temp_min} &#8451;</p>\r\n                <h1>{this.state.main.temp} &#8451;</h1>\r\n                {/*<p>humidity: {this.state.main.humidity}%</p>\r\n                    <p>pressure: {this.state.main.pressure} hPa</p>*/}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Forecast from './ForcastWeather.js';\r\nimport Current from './CurrentWeather.js';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lat: 0,\r\n            lon: 0,\r\n\r\n        }\r\n    }\r\n\r\n        componentDidMount() {\r\n            if (navigator.geolocation)\r\n                navigator.geolocation.getCurrentPosition(this.setpos, this.error)\r\n        }\r\n\r\n        setpos = (position) => {\r\n            this.setState({\r\n                lat: position.coords.latitude,\r\n                lon: position.coords.longitude\r\n            })\r\n    }\r\n    error = (err) => {\r\n        alert(err)\r\n    }\r\n    forecastOnClick = (event) => {\r\n        this.setState({\r\n            lat: this.state.lat,\r\n            lon: this.state.lon,\r\n            forecast: !this.state.forecast\r\n        })\r\n    }\r\n\r\n    render() {\r\n            return (\r\n                <div id=\"App\">\r\n                    <Current lat={this.state.lat} lon={this.state.lon} />\r\n                    {<Forecast lat={this.state.lat} lon={this.state.lon} />}\r\n                    \r\n                </div>\r\n            );\r\n        }\r\n    }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}